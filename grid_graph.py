#-*- coding: utf-8 -*-

import os
import datetime
import scipy as sp
import matplotlib.pyplot as plt
import datetime
import time

sp.random.seed(3)  # 이후에 같은 데이터를 생성하기 위해

def plot_models(x, cs, msy, mdy, gry, models, mstime, mdtime, fname=None, mx=None, ymax=None, xmin=None, msI=0):
    colors = ['g', 'k', 'b', 'm', 'r']
    linestyles = ['-', '-.', '--', ':', '-']
    plt.clf()
    plt.scatter(x, cs, s=15)
    plt.title("graph")
    plt.xlabel("Time")
    plt.ylabel("Rate")
    plt.scatter(x, gry, s=5, marker='*', c=colors[0])
    # plt.scatter(x, msy, s=5, marker='_', c=colors[1])
    # plt.scatter(x, mdy, s=5, marker='.', c=colors[3])
    mx = sp.linspace(0, x[-1], 1000)

    plt.plot([mstime]*len(mx), mx, linestyle=':', linewidth=2, c='m')
    plt.plot([mdtime]*len(mx), mx, linestyle=':', linewidth=2, c='m')

    if models:
        mx = sp.linspace(0, 200, 500)
        for model in models:
            plt.plot(mx+msI, model(mx), linewidth=2)

    plt.legend(["d=%i" % m.order for m in models], loc="upper right")
    
    plt.autoscale(tight=True)
    plt.ylim(ymin=0)
    if ymax: 
        plt.ylim(ymax=ymax)
    if xmin:
        plt.xlim(xmin=xmin)
    plt.xlim(xmax=1000)
    plt.ylim(ymax=40)
    plt.grid(True, linestyle='-', color='0.75')
    plt.savefig(fname)

def toSecond(s):
    x = time.strptime(s.split(',')[0],'%H:%M:%S')
    return datetime.timedelta(hours=x.tm_hour,minutes=x.tm_min,seconds=x.tm_sec).total_seconds()

dates = ['2017-03-06', '2017-03-10', '2017-03-10', '2017-03-14', '2017-03-15', '2017-03-16', '2017-03-16', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-23', '2017-03-24', '2017-03-24', '2017-03-28', '2017-03-30', '2017-03-30', '2017-03-31', '2017-04-03', '2017-04-03', '2017-04-03', '2017-04-04', '2017-04-05', '2017-04-05', '2017-04-06', '2017-04-07', '2017-04-07', '2017-04-11', '2017-04-11', '2017-04-11', '2017-04-12', '2017-04-12', '2017-04-13', '2017-04-13', '2017-04-13', '2017-04-14', '2017-04-18', '2017-04-20', '2017-04-20', '2017-04-24', '2017-04-24', '2017-04-25', '2017-04-26', '2017-04-26', '2017-04-26', '2017-04-27', '2017-05-02', '2017-05-04', '2017-05-04', '2017-05-04', '2017-05-10', '2017-05-12', '2017-05-17', '2017-05-18', '2017-05-18', '2017-05-19', '2017-05-22', '2017-05-24', '2017-05-26', '2017-05-26', '2017-05-29', '2017-05-30', '2017-06-01', '2017-06-05', '2017-06-05', '2017-06-05', '2017-06-13', '2017-06-14', '2017-06-16', '2017-06-19', '2017-06-20', '2017-06-20', '2017-06-20', '2017-06-20', '2017-06-20', '2017-06-21', '2017-06-29', '2017-06-29', '2017-07-03', '2017-07-03', '2017-07-04', '2017-07-05', '2017-07-05', '2017-07-05', '2017-07-07', '2017-07-07', '2017-07-10', '2017-07-10', '2017-07-11', '2017-03-06', '2017-03-08', '2017-03-10', '2017-03-14', '2017-03-15', '2017-03-21', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-23', '2017-03-23', '2017-03-24', '2017-03-24', '2017-03-28', '2017-03-30', '2017-03-31', '2017-04-03', '2017-04-03', '2017-04-03', '2017-04-04', '2017-04-05', '2017-04-05', '2017-04-07', '2017-04-07', '2017-04-11', '2017-04-11', '2017-04-12', '2017-04-12', '2017-04-13', '2017-04-13', '2017-04-13', '2017-04-13', '2017-04-14', '2017-04-24', '2017-04-24', '2017-04-24', '2017-04-25', '2017-04-25', '2017-04-26', '2017-04-28', '2017-05-04', '2017-05-04', '2017-05-04', '2017-05-04', '2017-05-04', '2017-05-10', '2017-05-17', '2017-05-17', '2017-05-18', '2017-05-19', '2017-05-22', '2017-05-26', '2017-05-26', '2017-05-26', '2017-05-29', '2017-06-05', '2017-06-05', '2017-06-07', '2017-06-09', '2017-06-12', '2017-06-12', '2017-06-13', '2017-06-14', '2017-06-15', '2017-06-16', '2017-06-19', '2017-06-20', '2017-06-20', '2017-06-27', '2017-07-03', '2017-07-03', '2017-07-03', '2017-07-04', '2017-07-05', '2017-07-05', '2017-07-05', '2017-07-07', '2017-07-07', '2017-07-10', '2017-07-11']

bcodes = [b'900280', b'087260', b'115500', b'010240', b'043910', b'006920', b'900270', b'215100', b'208870', b'069330', b'123410', b'208140', b'054630', b'123570', b'006920', b'042500', b'123570', b'008700', b'002700', b'072950', b'122800', b'096630', b'004770', b'049480', b'072950', b'086670', b'006980', b'215100', b'218150', b'035460', b'037950', b'041460', b'045060', b'045520', b'049120', b'226350', b'201490', b'215100', b'218150', b'018700', b'047080', b'033100', b'197210', b'006920', b'900270', b'046970', b'241520', b'155660', b'001840', b'069730', b'008700', b'038460', b'014470', b'037950', b'002780', b'025620', b'218150', b'039420', b'043910', b'083470', b'079650', b'036690', b'212560', b'047920', b'038010', b'114120', b'007630', b'103230', b'101170', b'148250', b'050760', b'225530', b'097800', b'018000', b'103130', b'222420', b'101390', b'219130', b'043580', b'038060', b'204840', b'054180', b'007630', b'046310', b'200470', b'134580', b'046310', b'090710', b'222810', b'900280', b'241520', b'115500', b'010240', b'043910', b'028040', b'215100', b'208870', b'123410', b'208140', b'204840', b'054630', b'123570', b'006920', b'042500', b'008700', b'070590', b'072950', b'122800', b'096630', b'004770', b'049480', b'086670', b'006980', b'218150', b'035460', b'037950', b'041460', b'045060', b'001380', b'045520', b'049120', b'226350', b'003160', b'018700', b'047080', b'124500', b'033100', b'197210', b'004100', b'069730', b'155660', b'001840', b'060260', b'002140', b'008700', b'014470', b'033100', b'002780', b'025620', b'218150', b'053290', b'043910', b'083470', b'079650', b'047920', b'038010', b'048410', b'031860', b'083660', b'054090', b'007630', b'103230', b'138490', b'101170', b'148250', b'225530', b'097800', b'043580', b'043580', b'017510', b'038060', b'204840', b'054180', b'046310', b'123040', b'200470', b'222810', b'090710', b'222810']

mesutimes = ['09:02:48', '09:04:19', '09:07:59', '09:11:19', '09:02:38', '09:04:48', '09:02:28', '09:08:05', '09:10:35', '09:10:55', '09:03:05', '09:11:28', '09:04:15', '09:11:15', '09:03:16', '09:02:09', '09:08:49', '09:02:28', '09:02:28', '09:04:38', '09:06:38', '09:02:49', '09:02:06', '09:02:16', '09:05:27', '09:04:05', '09:04:05', '09:11:36', '09:11:56', '09:11:46', '09:02:48', '09:07:08', '09:03:59', '09:05:49', '09:11:19', '09:06:58', '09:10:18', '09:07:25', '09:09:35', '09:03:46', '09:11:26', '09:03:29', '09:03:26', '09:03:36', '09:04:06', '09:03:36', '09:04:26', '09:02:58', '09:06:08', '09:03:28', '09:04:30', '09:09:19', '09:04:46', '09:03:25', '09:03:45', '09:03:25', '09:04:05', '09:04:19', '09:05:47', '09:09:57', '09:03:35', '09:05:36', '09:05:45', '09:02:35', '09:11:15', '09:09:05', '09:07:17', '09:08:38', '09:04:58', '09:06:08', '09:05:08', '09:04:58', '09:04:38', '09:05:08', '09:07:48', '09:11:28', '09:05:36', '09:10:46', '09:02:38', '09:07:28', '09:10:19', '09:06:09', '09:07:49', '09:10:49', '09:03:28', '09:10:28', '09:06:46', '09:11:16', '09:04:27', '09:02:53', '09:11:21', '09:07:54', '09:11:44', '09:02:33', '09:05:40', '09:08:50', '09:11:00', '09:03:00', '09:11:53', '09:11:53', '09:04:10', '09:11:10', '09:03:11', '09:02:04', '09:02:33', '09:03:13', '09:04:43', '09:06:23', '09:02:44', '09:02:01', '09:02:21', '09:04:00', '09:04:00', '09:11:51', '09:11:51', '09:03:23', '09:07:13', '09:04:04', '09:05:04', '09:05:44', '09:12:24', '09:06:53', '09:02:41', '09:03:51', '09:07:11', '09:03:14', '09:04:04', '09:03:31', '09:03:20', '09:02:23', '09:03:13', '09:05:53', '09:03:43', '09:05:03', '09:03:55', '09:05:01', '09:03:21', '09:03:50', '09:03:40', '09:03:20', '09:03:42', '09:05:52', '09:09:42', '09:03:40', '09:02:40', '09:11:10', '09:07:31', '09:08:22', '09:03:03', '09:04:53', '09:07:22', '09:08:23', '09:11:23', '09:05:23', '09:06:03', '09:05:03', '09:04:23', '09:03:41', '09:03:03', '09:10:33', '09:07:43', '09:10:14', '09:06:14', '09:10:44', '09:06:14', '09:04:03', '09:08:43', '09:11:21', '09:04:32']

medotimes = ['09:03:48', '09:06:09', '09:08:39', '09:21:09', '09:03:08', '09:07:58', '09:23:08', '09:09:35', '09:11:05', '09:11:25', '09:17:05', '09:12:48', '09:05:05', '09:13:35', '09:05:26', '09:02:39', '09:13:59', '09:04:48', '09:02:58', '09:05:08', '09:07:09', '09:08:49', '09:06:02', '09:06:02', '09:08:07', '09:05:05', '09:11:09', '09:12:06', '09:14:56', '09:17:16', '09:05:18', '09:11:28', '09:04:49', '09:06:39', '09:14:09', '09:07:48', '09:19:58', '09:08:55', '09:10:05', '09:07:06', '09:17:26', '09:22:29', '09:04:06', '09:14:26', '09:16:56', '09:05:36', '09:09:06', '09:03:48', '09:06:38', '09:06:58', '09:10:40', '09:11:19', '09:05:16', '09:06:55', '09:06:55', '09:08:55', '09:04:55', '09:05:09', '09:06:17', '09:16:27', '09:11:35', '09:06:06', '09:08:55', '09:10:35', '09:11:45', '09:17:05', '09:07:57', '09:10:38', '09:05:38', '09:12:48', '09:05:38', '09:05:48', '09:07:48', '09:09:18', '09:09:38', '09:12:08', '09:11:56', '09:15:46', '09:04:48', '09:14:28', '09:20:29', '09:10:59', '09:11:39', '09:14:59', '09:09:38', '09:10:58', '09:10:56', '09:22:36', '09:18:47', '09:03:43', '09:12:11', '09:12:24', '09:21:04', '09:03:13', '09:06:10', '09:09:40', '09:11:40', '09:16:20', '09:12:43', '09:16:43', '09:05:10', '09:13:50', '09:05:21', '09:02:34', '09:08:23', '09:04:33', '09:05:43', '09:06:54', '09:08:54', '09:05:57', '09:05:57', '09:05:10', '09:11:04', '09:15:11', '09:17:21', '09:05:33', '09:11:23', '09:04:54', '09:05:34', '09:06:54', '09:14:14', '09:07:43', '09:03:41', '09:06:31', '09:19:11', '09:03:44', '09:21:24', '09:05:31', '09:18:20', '09:03:33', '09:03:53', '09:06:33', '09:07:23', '09:08:13', '09:10:05', '09:07:11', '09:07:31', '09:07:00', '09:09:30', '09:04:20', '09:04:32', '09:06:52', '09:16:22', '09:11:30', '09:10:50', '09:11:40', '09:08:11', '09:23:22', '09:04:13', '09:22:13', '09:07:52', '09:10:23', '09:12:33', '09:05:53', '09:13:53', '09:05:53', '09:10:43', '09:06:41', '09:04:53', '09:11:13', '09:14:23', '09:20:24', '09:10:54', '09:15:04', '09:19:14', '09:08:53', '09:09:23', '09:23:11', '09:09:12']
aa = 0
for datei, da in enumerate(dates):

    # print(da, dates[:3], len(dates))
    # time.sleep(4)

    if(da == '2017-03-06'):
        if(aa == 1):
            break;
        aa = 1
    
    date = da
    setcode = bcodes[datei] #b'038950'
    
    filePath = os.path.join("C:\\", "Dropbox\\com_1\\Data\\" + date + "\\" + date + ".txt");
    data = sp.genfromtxt(filePath, delimiter="\t", dtype='|S20')

    # code to analysis
    # codes = sp.unique(data[data[:,7] == setcode][:,7])
    times = sp.unique(data[data[:,0] == setcode][:,0])
    
    plusCnt = 0
    minusCnt = 0
    mesuCost = dict()
    upCost = dict()
    downCost = dict()
    
    str_standardTime = datetime.timedelta(hours=9,minutes=2,seconds=00).total_seconds()
    str_medoTime = datetime.timedelta(hours=15,minutes=20,seconds=00).total_seconds()
    
    second_standardTime = 0
    for i, t in enumerate(times):
        x = time.strptime(t.decode('utf-8'), '%H:%M:%S')
        nt = datetime.timedelta(hours=x.tm_hour,minutes=x.tm_min,seconds=x.tm_sec).total_seconds()
        second_standardTime = nt    
        if(nt > str_standardTime):
            str_standardTime = t.decode('utf-8')
            break;
    
    second_medoTime = 0

    for i, t in enumerate(times):
        x = time.strptime(t.decode('utf-8'), '%H:%M:%S')
        nt = datetime.timedelta(hours=x.tm_hour,minutes=x.tm_min,seconds=x.tm_sec).total_seconds()
        second_medoTime = nt
        if(nt > str_medoTime):
            str_medoTime = t.decode('utf-8')
            break;
    
    seecode = ''
    sd = 0
    ci = datei
    code = bcodes[ci]
    # for ci, code in enumerate(bcodes):
    if(True):
        
        exportData = data[data[:,7] == code]
        # firstTime for time conver to index
        x = time.strptime(exportData[0,0].decode('utf-8'), '%H:%M:%S')
        firstSecond = datetime.timedelta(hours=x.tm_hour,minutes=x.tm_min,seconds=x.tm_sec).total_seconds()

        sec_mesutime = toSecond(mesutimes[ci])
        sec_medotime = toSecond(medotimes[ci])

        print(date, setcode, mesutimes[ci], medotimes[ci], ci,code)

        mesuIndex = 0
        medoIndex = 0
        maxlist = sp.array([])
        ti = sp.array([])
        c = exportData[:, 3].astype(float)
        maxIndex = sp.argmax(c)
        maxTime = time.strptime(exportData[maxIndex,0].decode('utf-8'), '%H:%M:%S')
        maxSecond = datetime.timedelta(hours=maxTime.tm_hour,minutes=maxTime.tm_min,seconds=maxTime.tm_sec).total_seconds()
        minIndex = sp.argmin(c)
        minTime = time.strptime(exportData[minIndex,0].decode('utf-8'), '%H:%M:%S')
        minSecond = datetime.timedelta(hours=minTime.tm_hour,minutes=minTime.tm_min,seconds=minTime.tm_sec).total_seconds()
        for i, b_currentTime in enumerate(exportData[:,0]):
            t_currentTime = time.strptime(b_currentTime.decode('utf-8'), '%H:%M:%S')
            second = datetime.timedelta(hours=t_currentTime.tm_hour,minutes=t_currentTime.tm_min,seconds=t_currentTime.tm_sec).total_seconds()
            v_time = second - firstSecond
    
            ti = sp.append(ti, (v_time)/10)
            maxr = max(exportData[:i+1,5].astype(float))/30
            ry = ((exportData[:i+1,4].astype(float))/(max(exportData[:i+1,4].astype(float))))*30
            msy = (exportData[:i+1,5].astype(float))/maxr        
            mdy = (exportData[:i+1,6].astype(float))/maxr        
            rate = exportData[i, 3].decode('UTF-8')
            grade = int(exportData[i, 1].decode('UTF-8'))
            chegangs = (exportData[:i+1,9].astype(float))/10

            if(second < sec_mesutime):
                mesuIndex = i

            if(second < sec_medotime):
                medoIndex = i


        mesuIndex = mesuIndex+1
        medoIndex = medoIndex+1
        y = exportData[:mesuIndex+1,3].astype(float)
        maxRate = max(exportData[mesuIndex:, 3].astype(float))
        mesuRate = exportData[mesuIndex,3].astype(float)
        if(len(y) <= 1):
            break

        level = 1
        fit = sp.polyfit(sp.array(range(len(ti[:mesuIndex+1]))), y, 1)
        gradient = sp.around(fit[0]*10, decimals=2)

        chegangs_e = (exportData[mesuIndex:medoIndex+1,9].astype(float))/10

        f1 = sp.poly1d(sp.polyfit(sp.array(range(len(chegangs_e))), chegangs_e, 2))
        # f1 = sp.poly1d(fit)
        # f2 = sp.poly1d(sp.polyfit(ti[:mesuIndex+1], y, 11))
        # f3 = sp.poly1d(sp.polyfit(ti[:mesuIndex+1], y, 20))
        # f100 = sp.poly1d(sp.polyfit(ti[:mesuIndex+1], y, 40))

        img_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), "grd_img")
        plot_models(sp.array(range(len(ti))), c, msy, mdy, chegangs,[f1], mstime = ((sec_mesutime - firstSecond)/10) , mdtime = ((sec_medotime - firstSecond)/10) ,fname = os.path.join(img_dir, str(dates[datei])+ '_' +str(bcodes[datei].decode('utf-8')) + '_' + str(maxRate - mesuRate) + ".png"), msI=mesuIndex) 







